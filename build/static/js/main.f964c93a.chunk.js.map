{"version":3,"sources":["Components/Layout/Header/Header.tsx","Styles/theme.ts","analytics.tsx","constants.ts","Screens/Home/Home.tsx","Routes/Routes.tsx","Hook/useGoogleAnalytics.tsx","Routes/App.tsx","index.tsx"],"names":["Container","styled","header","Header","deviceSizes","deviceMax","mobile","tablet","laptop","deviceMin","wide","defaultTheme","bgColor1","bgColor2","bgColor3","accentColor","accentFont","textShadow","fullHeight","window","innerWidth","innerHeight","deviceScreenMax","deviceScreenMin","GlobalStyles","createGlobalStyle","reset","props","theme","process","REACT_APP_BACKEND_URI","ReactGA","initialize","debug","path","set","page","pageview","main","Home","Routes","location","useLocation","React","useEffect","analytics","currentPath","pathname","search","useGoogleAnalytics","exact","component","App","rootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"sLAEMA,EAAYC,IAAOC,OAAV,0BAMAC,EAJA,WACd,OAAO,cAACH,EAAD,K,QCDFI,EACG,IADHA,EAEG,IAFHA,EAGG,KAHHA,EAIC,KAGDC,EAAY,CACjBC,OAAO,0BAAD,OAA4BF,EAA5B,OACNG,OAAO,0BAAD,OAA4BH,EAA5B,OACNI,OAAO,0BAAD,OAA4BJ,EAA5B,QAGDK,EAAY,CACjBH,OAAO,0BAAD,OAA4BF,EAAqB,EAAjD,OACNG,OAAO,0BAAD,OAA4BH,EAAqB,EAAjD,OACNI,OAAO,0BAAD,OAA4BJ,EAAqB,EAAjD,OACNM,KAAK,0BAAD,OAA4BN,EAAmB,EAA/C,QAGQO,EAA6B,CACzCC,SAAU,UACVC,SAAU,UACVC,SAAU,UACVC,YAAa,UACbC,WAAY,gDACZC,WAAY,iCACZC,WAAYC,OAAOC,WAAa,IAAM,QAA1B,UAAuCD,OAAOE,YAA9C,MACZC,gBAAiBjB,EACjBkB,gBAAiBd,GAILe,EAAeC,YAAH,w0BACrBC,KAOiB,SAACC,GAAD,OAAWA,EAAMC,MAAMhB,Y,+BCjB7B,GC5BSiB,+MAAYC,sBDIrB,WAGdC,IAAQC,WCL0BH,iBDKF,CAAEI,OADKJ,MAsBzB,EALM,SAACK,GACrBH,IAAQI,IAAI,CAAEC,KAAMF,IACpBH,IAAQM,SAASH,IEvBlB,IAAMlC,EAAYC,IAAOqC,KAAV,0BAMAC,EAJF,WACZ,OAAO,cAAC,EAAD,KCQOC,EAVA,WAGd,OCCc,WACd,IAAMC,EAAWC,cAEjBC,IAAMC,WAAU,WACfC,MACE,IAEHF,IAAMC,WAAU,WACf,IAAME,EAAcL,EAASM,SAAWN,EAASO,OACjDH,EAAuBC,KACrB,CAACL,IDbJQ,GAGC,cAAC,IAAD,UACC,cAAC,IAAD,CAAOC,OAAK,EAAChB,KAAK,IAAIiB,UAAWZ,OEWrBa,EAZO,WACrB,OACC,cAAC,IAAD,UACC,eAAC,IAAD,CAAexB,MAAOjB,EAAtB,UACC,cAACa,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCVE6B,EAAcC,SAASC,eAAe,QACxCF,EAAYG,gBACfC,kBAAQ,cAAC,EAAD,IAASJ,GAEjBK,iBAAO,cAAC,EAAD,IAASL,K","file":"static/js/main.f964c93a.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Container = styled.header``;\n\nconst Header = () => {\n\treturn <Container></Container>;\n};\n\nexport default Header;\n","import { createGlobalStyle, DefaultTheme, keyframes } from \"styled-components\";\nimport reset from \"styled-reset\";\n\n// Media query\nconst deviceSizes = {\n\tmobile: 639,\n\ttablet: 767,\n\tlaptop: 1023,\n\twide: 1920,\n};\n\nconst deviceMax = {\n\tmobile: `screen and (max-width: ${deviceSizes.mobile}px)`,\n\ttablet: `screen and (max-width: ${deviceSizes.tablet}px)`,\n\tlaptop: `screen and (max-width: ${deviceSizes.laptop}px)`,\n};\n\nconst deviceMin = {\n\tmobile: `screen and (min-width: ${deviceSizes.mobile + 1}px)`,\n\ttablet: `screen and (min-width: ${deviceSizes.tablet + 1}px)`,\n\tlaptop: `screen and (min-width: ${deviceSizes.laptop + 1}px)`,\n\twide: `screen and (min-width: ${deviceSizes.wide + 1}px)`,\n};\n\nexport const defaultTheme: DefaultTheme = {\n\tbgColor1: \"#4d5e65\",\n\tbgColor2: \"#706260\",\n\tbgColor3: \"#9a7951\",\n\taccentColor: \"#e4cbac\",\n\taccentFont: '\"Cormorant Garamond\", \"Nanum Myeongjo\", serif',\n\ttextShadow: \"2px 2px 4px rgba(0, 0, 0, 0.5)\",\n\tfullHeight: window.innerWidth > 639 ? \"100vh\" : `${window.innerHeight}px`,\n\tdeviceScreenMax: deviceMax,\n\tdeviceScreenMin: deviceMin,\n};\n\n//global\nexport const GlobalStyles = createGlobalStyle`\n  ${reset}\n\n\tbody, html{\n\t\theight:100%;\n\t}\n  body{\n    font-family: 'Noto Sans KR', sans-serif;  \n\t\tbackground-color:${(props) => props.theme.bgColor1};\n\t\ttransition: background-color 0.5s;\n\t\t\n\t}\n\n  main{\n    width: auto;\n    transition: all .5s;\n  }\n\n  a {\n    text-decoration: none;\n  }\n\n\tbody::-webkit-scrollbar {\n\twidth: 5px;\n\theight:5px;\n\t/* display: none; */\n\t}\n\n\tbody::-webkit-scrollbar-thumb {\n\t\tbackground-color: rgba(255,255,255,0.7);\n\t\theight: 20px;\n\t\tborder-radius: 10px;\n\t}\n\n\tbody::-webkit-scrollbar-track {\n\t\tbackground-color: rgba(0,0,0,0.1);\n\t}\n\n\t.overflow-hidden{\n\t\toverflow:hidden;\n\t}\n\t.overflow-unset{\n\t\toverflow:unset;\n\t}\n\n\t.blind {\n\t\tposition: absolute;\n\t\twidth: 1px;\n\t\theight: 1px;\n\t\tclip: rect(0 0 0 0);\n\t\toverflow: hidden;\n\t}\n`;\n","// 구글 통계\nimport ReactGA from \"react-ga\";\nimport { TRACKING_ID } from \"./constants\";\n\nconst initGA = () => {\n\t// Enable debug mode on the local development environment\n\tconst isDev = !process.env.NODE_ENV || process.env.NODE_ENV === \"development\";\n\tReactGA.initialize(TRACKING_ID, { debug: isDev });\n};\n\ntype sendEventType = (T: ParamsType) => void;\ntype ParamsType = {\n\tcategory: string | any;\n\taction: string | any;\n\tlabel: string | any;\n};\n\nconst sendEvent: sendEventType = ({ category, action, label }) => {\n\tif (category && action) {\n\t\tReactGA.event({ category, action, label });\n\t}\n};\n\nconst sendPageview = (path: string) => {\n\tReactGA.set({ page: path });\n\tReactGA.pageview(path);\n};\n\nexport default {\n\tinitGA,\n\tsendEvent,\n\tsendPageview,\n};\n","export const API_HOST = process.env.REACT_APP_BACKEND_URI || \"http://localhost:8000\";\n\nexport const TRACKING_ID: string = process.env.REACT_APP_TRACKING_ID! as string;\n","import styled from \"styled-components\";\n\nconst Container = styled.main``;\n\nconst Home = () => {\n\treturn <Container></Container>;\n};\n\nexport default Home;\n","import { Route, Switch } from \"react-router\";\nimport useGoogleAnalytics from \"../Hook/useGoogleAnalytics\";\nimport Home from \"../Screens/Home/Home\";\nconst Routes = () => {\n\tuseGoogleAnalytics();\n\n\treturn (\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t</Switch>\n\t);\n};\n\nexport default Routes;\n","// 구글 애널리틱스\n// 구글 통계 hook\nimport React from \"react\";\n\nimport analytics from \"../analytics\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function useGoogleAnalytics() {\n\tconst location = useLocation();\n\n\tReact.useEffect(() => {\n\t\tanalytics.initGA();\n\t}, []);\n\n\tReact.useEffect(() => {\n\t\tconst currentPath = location.pathname + location.search;\n\t\tanalytics.sendPageview(currentPath);\n\t}, [location]);\n}\n","import { BrowserRouter } from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport Header from \"../Components/Layout/Header/Header\";\n\nimport { GlobalStyles, defaultTheme } from \"../Styles/theme\";\nimport Routes from \"./Routes\";\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<BrowserRouter>\n\t\t\t<ThemeProvider theme={defaultTheme}>\n\t\t\t\t<GlobalStyles />\n\t\t\t\t<Header />\n\t\t\t\t<Routes />\n\t\t\t</ThemeProvider>\n\t\t</BrowserRouter>\n\t);\n};\n\nexport default App;\n","import { hydrate, render } from \"react-dom\";\nimport App from \"./Routes/App\";\n\nconst rootElement = document.getElementById(\"root\")! as HTMLElement;\nif (rootElement.hasChildNodes()) {\n\thydrate(<App />, rootElement);\n} else {\n\trender(<App />, rootElement);\n}\n"],"sourceRoot":""}